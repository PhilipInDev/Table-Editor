{"version":3,"sources":["class/GridSelection.js","class/GridKeyboardSnippets.js"],"names":["GridSelection","selection","enable","on","store","event","ctrlKey","metaKey","stored","el","classList","remove","clearSelection","selectedCells","changed","added","removed","contains","add","focus","console","log","selected","keepSelection","selectedTd","selectedTh","forEach","tagName","push","length","SelectionArea","selectionAreaClass","selectionContainerClass","container","selectables","startareas","singleTap","allow","intersect","overlap","startThreshold","scrolling","speedDivider","manualSpeed","boundaries","GridKeyboardSnippets","textForClipBoard","textForTable","i","querySelectorAll","textContent","slice","SELECTION_OBJ","rangeCount","toString","e","keysPressed","key","copyTextFromSelectedCells","copyTextFromSelection","clipBoard","writeText","textArr","split","textIndex","preventDefault","navigator","clipboard","window","getSelection"],"mappings":"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","file":"GridKeyboardSnippets.ecf9ee35.js","sourceRoot":"..","sourcesContent":["'use strict'\nexport default class GridSelection{\n    constructor(){}\n\n    static selectedCells;\n    static selectedTh;\n    static selectedTd;\n    static selection;\n\n    static initSelection(){\n        GridSelection.selection.enable();\n        // console.log(selection.getSelection())\n        GridSelection.selection.on('beforestart', ({store, event}) => {\n            if (!event.ctrlKey && !event.metaKey) {\n                // Unselect all elements\n                for (const el of store.stored) {\n                    el.classList.remove('cell-selected');\n                }\n                // Clear previous selection\n                GridSelection.selection.clearSelection();\n                GridSelection.selectedCells = [];\n            }\n\n            // Use this event to decide whether a selection should take place or not.\n            // For example if the user should be able to normally interact with input-elements you \n            // may want to prevent a selection if the user clicks such a element:\n        }).on('start', ({store, event}) => {\n\n            // Unselect all elements\n            for (const el of store.stored) {\n                el.classList.remove('cell-selected');\n            }\n            // Clear previous selection\n            GridSelection.selection.clearSelection();\n\n            // A selection got initiated, you could now clear the previous selection or\n            // keep it if in case of multi-selection.\n            // console.log('start', evt);\n        }).on('move', ({store: {changed: {added, removed}}, event}) => {\n\n            for(let el of added){\n                if(!el.classList.contains('cell-on-dblclick')){\n                    el.classList.add('cell-selected');\n                    el.focus();\n                }\n            }\n            console.log(removed)\n            for(let el of removed){\n                el.classList.remove('cell-selected');\n            }  \n        // Here you can update elements based on their state.\n        // console.log('move', evt);\n        }).on('stop', ({store: {selected}})=> {\n            GridSelection.selection.keepSelection();\n            GridSelection.selectedCells = [];\n            GridSelection.selectedTd = [];\n            GridSelection.selectedTh = [];\n            // Do something with the selected elements.\n            selected.forEach(el=>{\n                if(el.tagName === 'TH' && !el.classList.contains('cell-on-dblclick')){\n                GridSelection.selectedTh.push(el)\n                }\n                if(el.tagName === 'TD' && !el.classList.contains('cell-on-dblclick')){\n                GridSelection.selectedTd.push(el)\n                }\n            })\n\n            if(GridSelection.selectedTh.length && GridSelection.selectedTd.length){\n                GridSelection.selectedCells.push(...GridSelection.selectedTh);\n                GridSelection.selectedCells.push(...GridSelection.selectedTd);\n            }\n            if(!GridSelection.selectedTh.length && GridSelection.selectedTd.length){\n                GridSelection.selectedCells.push(...GridSelection.selectedTd);\n            }\n            if(GridSelection.selectedTh.length && !GridSelection.selectedTd.length){\n                GridSelection.selectedCells.push(...GridSelection.selectedTh);\n            }\n        });\n    }\n\n    static selectionSettings(){\n        GridSelection.selection = new SelectionArea({\n\n            // Class for the selection-area itself (the element).\n            selectionAreaClass: 'selection-area',\n          \n            // Class for the selection-area container.\n            selectionContainerClass: 'selection-area-container',\n          \n            // Query selector or dom-node to set up container for the selection-area element.\n            container: '.table-grid-wrapper',\n          \n            // document object - if you want to use it within an embed document (or iframe).\n          \n            // Query selectors for elements which can be selected.\n            selectables: ['td', 'th'],\n          \n            // Query selectors for elements from where a selection can be started from.\n            startareas: ['h3', '.cell-text'],\n          \n\n            // Configuration in case a selectable gets just clicked.\n            singleTap: {\n    \n                // Enable single-click selection (Also disables range-selection via shift + ctrl).\n                allow: false,\n                intersect: 'native'\n            },\n            // Specifies what should be done if already selected elements get selected again.\n            //   invert: Invert selection for elements which were already selected\n            //   keep: Keep selected elements (use clearSelection() to remove those)\n            //   drop: Remove stored elements after they have been touched\n            overlap: 'invert',\n            // On which point an element should be selected.\n            // Available modes are cover (cover the entire element), center (touch the center) or\n            // the default mode is touch (just touching it).\n            intersect: 'touch',\n    \n            // px, how many pixels the point should move before starting the selection (combined distance).\n            // Or specifiy the threshold for each axis by passing an object like {x: <number>, y: <number>}.\n            startThreshold: 10,\n    \n            // Scroll configuration.\n            scrolling: {\n    \n                // On scrollable areas the number on px per frame is devided by this amount.\n                // Default is 10 to provide a enjoyable scroll experience.\n                speedDivider: 10,\n    \n                // Browsers handle mouse-wheel events differently, this number will be used as \n                // numerator to calculate the mount of px while scrolling manually: manualScrollSpeed / scrollSpeedDivider.\n                manualSpeed: 750\n            },\n            // Query selectors for elements which will be used as boundaries for the selection.\n            boundaries: ['.table-grid-wrapper']\n        })\n    }\n}","'use strict'\n\nimport GridSelection from \"./GridSelection\";\n\nexport default class GridKeyboardSnippets{\n    constructor(){}\n\n    static textForClipBoard;\n    static textForTable;\n    static clipBoard = navigator.clipboard;\n    static SELECTION_OBJ = window.getSelection();\n    static keysPressed = {};\n\n    static copyTextFromSelectedCells(){\n        if(GridSelection.selectedCells.length){\n          GridKeyboardSnippets.textForClipBoard = '';\n          GridKeyboardSnippets.textForTable = '';\n          for(let i = 0; i < GridSelection.selectedCells.length; i++){\n            GridKeyboardSnippets.textForClipBoard += GridSelection.selectedCells[i].querySelectorAll('h3, div.cell-text')[0].textContent + ' ';\n            GridKeyboardSnippets.textForTable += GridSelection.selectedCells[i].querySelectorAll('h3, div.cell-text')[0].textContent + '/&!/';\n          }\n          GridKeyboardSnippets.textForTable = GridKeyboardSnippets.textForTable.slice(0, GridKeyboardSnippets.textForTable.length - 4);\n        }\n    }\n\n    static copyTextFromSelection(){\n        if(!GridSelection.selectedCells.length && GridKeyboardSnippets.SELECTION_OBJ.rangeCount){\n          GridKeyboardSnippets.textForClipBoard = '';\n          GridKeyboardSnippets.textForTable = '';\n          \n          GridKeyboardSnippets.textForClipBoard = GridKeyboardSnippets.SELECTION_OBJ.toString();\n          \n          GridKeyboardSnippets.textForTable = GridKeyboardSnippets.SELECTION_OBJ.toString() + '/&!/';\n          GridKeyboardSnippets.textForTable = GridKeyboardSnippets.textForTable.slice(0, GridKeyboardSnippets.textForTable.length - 4);\n        }\n    }\n\n    static copyTextMain(e){\n        GridKeyboardSnippets.keysPressed[e.key] = true;\n        if(GridKeyboardSnippets.keysPressed['Control'] && e.key === 'c' && \n          (GridKeyboardSnippets.SELECTION_OBJ.rangeCount || GridSelection.selectedCells)){\n          GridKeyboardSnippets.copyTextFromSelectedCells();\n          GridKeyboardSnippets.copyTextFromSelection();\n          console.log(GridKeyboardSnippets.textForClipBoard)\n          GridKeyboardSnippets.clipBoard.writeText(GridKeyboardSnippets.textForClipBoard)\n        }\n      }\n\n    static pasteText(e){\n        if(GridSelection.selectedCells.length && GridKeyboardSnippets.keysPressed['Control'] && e.key === 'v'){\n          \n          GridKeyboardSnippets.keysPressed[e.key] = true;\n      \n          let textArr = GridKeyboardSnippets.textForTable.split('/&!/').length > 1 ? GridKeyboardSnippets.textForTable.split('/&!/') : [GridKeyboardSnippets.textForTable];\n          let textIndex = 0;\n          for(let i = 0; i < GridSelection.selectedCells.length; i++){\n            GridSelection.selectedCells[i].querySelectorAll('h3, div.cell-text')[0].textContent = textArr[textIndex];\n            textIndex++;\n            if(textIndex === textArr.length){\n              textIndex = 0;\n            } \n          }\n        }\n    }\n\n    static deleteCellTextOnKeyDown(e){\n        if((e.key === 'Backspace' || e.key === 'Delete') && GridSelection.selectedCells.length){\n          e.preventDefault();\n          GridSelection.selectedCells.forEach(el =>{\n            el.querySelectorAll('h3, div.cell-text')[0].textContent = '';\n          });\n        }\n    }\n    \n    static cutFromTable(event){\n        GridKeyboardSnippets.keysPressed[event.key] = true;\n      \n        if(GridKeyboardSnippets.keysPressed['Control'] && event.key == 'x') {\n            GridKeyboardSnippets.copyTextFromSelectedCells();\n            GridKeyboardSnippets.copyTextFromSelection();\n            GridKeyboardSnippets.clipBoard.writeText(GridKeyboardSnippets.textForClipBoard)\n            GridSelection.selectedCells.forEach(el =>{\n              el.querySelectorAll('h3, div.cell-text')[0].textContent = '';\n            });\n        }\n    }\n    static cleanKeysPressed(event){\n        delete GridKeyboardSnippets.keysPressed[event.key];\n    }\n}"]}