{"version":3,"sources":["class/GridSelection.js"],"names":["GridSelection","selection","enable","on","store","event","ctrlKey","metaKey","stored","classList","remove","clearSelection","selectedCells","changed","added","removed","el","contains","add","focus","console","log","selected","keepSelection","selectedTd","selectedTh","forEach","tagName","push","length","SelectionArea","selectionAreaClass","selectionContainerClass","container","selectables","startareas","singleTap","allow","intersect","overlap","startThreshold","scrolling","speedDivider","manualSpeed","boundaries"],"mappings":"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","file":"GridSelection.49b97536.js","sourceRoot":"..","sourcesContent":["'use strict'\nexport default class GridSelection{\n    constructor(){}\n\n    static selectedCells;\n    static selectedTh;\n    static selectedTd;\n    static selection;\n\n    static initSelection(){\n        GridSelection.selection.enable();\n        // console.log(selection.getSelection())\n        GridSelection.selection.on('beforestart', ({store, event}) => {\n            if (!event.ctrlKey && !event.metaKey) {\n                // Unselect all elements\n                for (const el of store.stored) {\n                    el.classList.remove('cell-selected');\n                }\n                // Clear previous selection\n                GridSelection.selection.clearSelection();\n                GridSelection.selectedCells = [];\n            }\n\n            // Use this event to decide whether a selection should take place or not.\n            // For example if the user should be able to normally interact with input-elements you \n            // may want to prevent a selection if the user clicks such a element:\n        }).on('start', ({store, event}) => {\n\n            // Unselect all elements\n            for (const el of store.stored) {\n                el.classList.remove('cell-selected');\n            }\n            // Clear previous selection\n            GridSelection.selection.clearSelection();\n\n            // A selection got initiated, you could now clear the previous selection or\n            // keep it if in case of multi-selection.\n            // console.log('start', evt);\n        }).on('move', ({store: {changed: {added, removed}}, event}) => {\n\n            for(let el of added){\n                if(!el.classList.contains('cell-on-dblclick')){\n                    el.classList.add('cell-selected');\n                    el.focus();\n                }\n            }\n            console.log(removed)\n            for(let el of removed){\n                el.classList.remove('cell-selected');\n            }  \n        // Here you can update elements based on their state.\n        // console.log('move', evt);\n        }).on('stop', ({store: {selected}})=> {\n            GridSelection.selection.keepSelection();\n            GridSelection.selectedCells = [];\n            GridSelection.selectedTd = [];\n            GridSelection.selectedTh = [];\n            // Do something with the selected elements.\n            selected.forEach(el=>{\n                if(el.tagName === 'TH' && !el.classList.contains('cell-on-dblclick')){\n                GridSelection.selectedTh.push(el)\n                }\n                if(el.tagName === 'TD' && !el.classList.contains('cell-on-dblclick')){\n                GridSelection.selectedTd.push(el)\n                }\n            })\n\n            if(GridSelection.selectedTh.length && GridSelection.selectedTd.length){\n                GridSelection.selectedCells.push(...GridSelection.selectedTh);\n                GridSelection.selectedCells.push(...GridSelection.selectedTd);\n            }\n            if(!GridSelection.selectedTh.length && GridSelection.selectedTd.length){\n                GridSelection.selectedCells.push(...GridSelection.selectedTd);\n            }\n            if(GridSelection.selectedTh.length && !GridSelection.selectedTd.length){\n                GridSelection.selectedCells.push(...GridSelection.selectedTh);\n            }\n        });\n    }\n\n    static selectionSettings(){\n        GridSelection.selection = new SelectionArea({\n\n            // Class for the selection-area itself (the element).\n            selectionAreaClass: 'selection-area',\n          \n            // Class for the selection-area container.\n            selectionContainerClass: 'selection-area-container',\n          \n            // Query selector or dom-node to set up container for the selection-area element.\n            container: '.table-grid-wrapper',\n          \n            // document object - if you want to use it within an embed document (or iframe).\n          \n            // Query selectors for elements which can be selected.\n            selectables: ['td', 'th'],\n          \n            // Query selectors for elements from where a selection can be started from.\n            startareas: ['h3', '.cell-text'],\n          \n\n            // Configuration in case a selectable gets just clicked.\n            singleTap: {\n    \n                // Enable single-click selection (Also disables range-selection via shift + ctrl).\n                allow: false,\n                intersect: 'native'\n            },\n            // Specifies what should be done if already selected elements get selected again.\n            //   invert: Invert selection for elements which were already selected\n            //   keep: Keep selected elements (use clearSelection() to remove those)\n            //   drop: Remove stored elements after they have been touched\n            overlap: 'invert',\n            // On which point an element should be selected.\n            // Available modes are cover (cover the entire element), center (touch the center) or\n            // the default mode is touch (just touching it).\n            intersect: 'touch',\n    \n            // px, how many pixels the point should move before starting the selection (combined distance).\n            // Or specifiy the threshold for each axis by passing an object like {x: <number>, y: <number>}.\n            startThreshold: 10,\n    \n            // Scroll configuration.\n            scrolling: {\n    \n                // On scrollable areas the number on px per frame is devided by this amount.\n                // Default is 10 to provide a enjoyable scroll experience.\n                speedDivider: 10,\n    \n                // Browsers handle mouse-wheel events differently, this number will be used as \n                // numerator to calculate the mount of px while scrolling manually: manualScrollSpeed / scrollSpeedDivider.\n                manualSpeed: 750\n            },\n            // Query selectors for elements which will be used as boundaries for the selection.\n            boundaries: ['.table-grid-wrapper']\n        })\n    }\n}"]}